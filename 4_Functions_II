{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNhvb1QOyYLBC0h7XTUjCD6"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import math\n","import cmath as im\n","import statistics as st\n","import random\n","import copy\n","\n","from datetime import date"],"metadata":{"id":"P-bDsNFtRSFZ","executionInfo":{"status":"ok","timestamp":1709589258002,"user_tz":-60,"elapsed":706,"user":{"displayName":"Naomi Cedeño Manrique","userId":"07623801168020297088"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["Write and test the function _isEven()_, that determines if a number is even:"],"metadata":{"id":"x-YE-LmARVmP"}},{"cell_type":"code","source":["def isEven(x):\n","  if x % 2 == 0:\n","    return True\n","  if not isinstance(x, int):\n","    return \"Ingrese un número entero.\"\n","  else:\n","    return False"],"metadata":{"id":"n1DHOE0surHL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write and test a function _isOdd()_, which determines whether a number is odd, by calling the function _isEven()_ and inverting its result:"],"metadata":{"id":"CRYRuLMARcEz"}},{"cell_type":"code","source":["def isOdd(x):\n","  if isEven(x) == True:\n","    return False\n","  if not isinstance(x, int):\n","    return \"Ingrese un número entero.\"\n","  else:\n","    return True"],"metadata":{"id":"5x_6Yj0QReeg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write and test a function _getFraction()_ that gets the fractional part of a float:"],"metadata":{"id":"3GLCCuH9Re1j"}},{"cell_type":"code","source":["def getFraction(x):\n","  x = x- math.floor(x)\n","  return x"],"metadata":{"id":"nh1gO4cnRiEf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write and test a function that returns the number of days in A years, B months and C weeks:"],"metadata":{"id":"Tf7yc6u6Riei"}},{"cell_type":"code","source":["def total_days(years, months, weeks):\n","  years = years * 365\n","  months = months * 30\n","  weeks = weeks * 7\n","\n","  total_days = years + months + weeks\n","\n","  return total_days"],"metadata":{"id":"-ZhaFZ9aRlmw"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Define a function called distance_from_zero, with one argument. If the type of the argument is either int or float, the function returns the absolute value of the input, and otherwise, the function returns “Nope”:"],"metadata":{"id":"ID0Khl8ARmEn"}},{"cell_type":"code","source":["def distance_from_zero(x):\n","  if isinstance(x, int) or isinstance(x, float):\n","    return abs(x)\n","  else:\n","    return \"Nope\""],"metadata":{"id":"TVYF45-iR5jl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Create a function that gets a number as parameter, and then prints the multiplication table for that number from 1 to 10:"],"metadata":{"id":"MpWo7VHpR6Gd"}},{"cell_type":"code","source":["def mult_table(x):\n","  print(f'Multiplication Table of {x}: \\n{x} * 1: {x} \\n{x} * 2: {x * 2} \\n{x} * 3: {x * 3} \\n{x} * 4: {x * 4} \\n{x} * 5: {x * 5} \\n{x} * 6: {x * 6} \\n{x} * 7: {x * 7} \\n{x} * 8: {x * 8} \\n{x} * 9: {x * 9} \\n{x} * 10: {x * 10}')\n","\n","mult_table(4)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v3qHrx6ESUL8","executionInfo":{"status":"ok","timestamp":1700428896100,"user_tz":-60,"elapsed":7,"user":{"displayName":"Naomi Cedeño Manrique","userId":"07623801168020297088"}},"outputId":"5f23506e-af59-413c-d4be-6952eef494bd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Multiplication Table of 4: \n","4 * 1: 4 \n","4 * 2: 8 \n","4 * 3: 12 \n","4 * 4: 16 \n","4 * 5: 20 \n","4 * 6: 24 \n","4 * 7: 28 \n","4 * 8: 32 \n","4 * 9: 36 \n","4 * 10: 40\n"]}]},{"cell_type":"markdown","source":["Write a function that gets as parameters two strings. The function returns the number of characters that the strings have in common:\n","\n","_Note: Each character counts only once, and also you can consider capitals different from lower case letters. Also, the function should return the number of characters that the strings have in common, and not print it._"],"metadata":{"id":"J6yaBv5ZSUqh"}},{"cell_type":"code","source":["def same_character(x, y):\n","  same_chars = 0\n","  common = \"\"\n","\n","  for char in x:\n","    if char in y and char not in common:\n","      same_chars += 1\n","      common += char\n","      print(common)\n","\n","  return same_chars"],"metadata":{"id":"tgD79YWxSfW4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write a function of one integer parameter that returns the approximation of pi according the Gregory-Leibnitz series:"],"metadata":{"id":"B-mSH8cuSgPg"}},{"cell_type":"code","source":["def gregory_leibnitz(x):\n","  serie = 0\n","\n","  for i in range(x):\n","    serie += ((-1) ** i) / ((2 * i) + 1)\n","\n","  serie = 4 * serie\n","\n","  return serie"],"metadata":{"id":"prBR2xWdS0im"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write a function that solves a quadratic equation. As parameters\n","it gets A, B, and C. It returns three values. The first is an integer that indicates the number of solutions, the second is the first solution, the third is the second solution, and if any of the solutions that do not exist, you can return as zero. Test the program:"],"metadata":{"id":"yXT0MMwCTGk1"}},{"cell_type":"code","source":["def quadratic_roots(a, b, c):\n","  root_1 = (-b + im.sqrt((b ** 2) - (4 * a * c))) / (2 * a)\n","  root_2 = (-b - im.sqrt((b ** 2) - (4 * a * c))) / (2 * a)\n","\n","  n_roots = 0\n","\n","  if np.imag(root_1) != 0:\n","    root_1 = \"Root 1 does not exist.\"\n","  else:\n","    root_1 = np.real(root_1)\n","    n_roots += 1\n","\n","  if np.imag(root_2) != 0:\n","    root_2 =  \"Root 2 does not exist.\"\n","  else:\n","    root_2 = np.real(root_2)\n","    n_roots += 1\n","\n","  return n_roots, root_1, root_2"],"metadata":{"id":"Tg0f7FibTVu1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write a function that calculates the binomial coefficient for two parameters, and returns the value:"],"metadata":{"id":"e4J_sNTyUbtE"}},{"cell_type":"code","source":["def binomial(x, y):\n","  if(x < 0 or y < 0):\n","    print('Ingrese solo números positivos.')\n","  else:\n","    if(x < y):\n","      print('El primer número debe ser mayor que el segundo, intente de nuevo.')\n","    else:\n","      coef = math.factorial(x) / (math.factorial(y) * math.factorial(x - y))\n","      return coef"],"metadata":{"id":"mArG3eolUlo2"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Fix the following code:\n","\n","```\n","def area_of_triangle ( bottom , height ):\n","  area = 0.5 * bottom * height\n","  print( \"The area of a triangle with a bottom of\", bottom , \"and a height of\", height , \"is\", area )\n","  \n","print( area_of_triangle ( 4.5, 1.0 ) )\n","```"],"metadata":{"id":"LyPxJDJlUmC1"}},{"cell_type":"code","source":["def area_of_triangle(bottom, height):\n","  area = 0.5 * bottom * height\n","  print(f'The area of a triangle with a bottom {bottom} and a height of {height} is {area}.')\n","\n","area_of_triangle(4.5, 1.0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8pJlHB0rU2O6","executionInfo":{"status":"ok","timestamp":1700428956352,"user_tz":-60,"elapsed":267,"user":{"displayName":"Naomi Cedeño Manrique","userId":"07623801168020297088"}},"outputId":"5871e75d-bf23-4691-ed28-411a76540377"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The area of a triangle with a bottom 4.5 and a height of 1.0 is 2.25.\n"]}]},{"cell_type":"markdown","source":["The final code for the loop-and-a-half is given below, and there is still something ugly about this code, namely the fact that if $x$ is smaller than zero or higher than 1000, the code still asks for $y$ even when it can know that it has to ask a new value for $x$. Create a function and insert it in this code, so that this issue gets fixed:\n","\n","```\n","from sys import exit\n","\n","while True:\n","  x = getInteger( \"Enter number 1: \" )\n","  \n","  if x == 0:\n","    break\n","  y = getInteger( \"Enter number 2: \" )\n","  \n","  if y == 0:\n","    break\n","  \n","  if (x < 0 or x > 1000) or (y < 0 or y > 1000):\n","    print( \"The numbers should be between 0 and 1000\" )\n","    continue\n","  \n","  if x%y == 0 or y%x == 0:\n","    print( \"Error: the numbers cannot be dividers\" )\n","    exit()\n","\n","  print( \"Multiplication of\", x, \"and\", y, \"gives\", x * y )\n","\n","print( \"Goodbye!\" )\n","```"],"metadata":{"id":"jAZu8XWoisL8"}},{"cell_type":"code","source":["from sys import exit\n","\n","def loop_and_a_half():\n","  x = int(input( \"Enter number 1: \" ))\n","  y = int(input( \"Enter number 2: \" ))\n","\n","  while True:\n","    if x == 0:\n","      break\n","    elif (x < 0 or x > 1000):\n","      print(\"The first number should be between 0 and 1000.\")\n","      x = int(input(\"Enter number 1: \"))\n","      continue\n","    elif y == 0:\n","      break\n","    elif (y < 0 or y > 1000):\n","      print(\"The second number should be between 0 and 1000.\")\n","      y = int(input(\"Enter number 2: \"))\n","      continue\n","    elif (x%y == 0 or y%x == 0):\n","      print(\"Error: the numbers cannot be dividers\")\n","      exit()\n","    else:\n","      print(f'Multiplication of {x} and {y} gives {x*y}.')\n","      exit()\n","\n","  print(\"Goodbye!\")"],"metadata":{"id":"RJIyW1TCjE6T"},"execution_count":null,"outputs":[]}]}