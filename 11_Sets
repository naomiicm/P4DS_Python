{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNEWynSZcbmhipAnxQhzobr"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import math\n","import cmath as im\n","import statistics as st\n","import random\n","import copy\n","\n","from datetime import date"],"metadata":{"id":"P-bDsNFtRSFZ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["There is a set method _symmetric_difference()_ which returns a set that contains all the elements that are in the union of two sets, except those that are found in both sets. Implement the _symmetric_difference()_ method without explicitly using it:"],"metadata":{"id":"nxq9MzMGjsLA"}},{"cell_type":"code","source":["def sym_dif(a, b):\n","  s_diff = a.union(b) - a.intersection(b)"],"metadata":{"id":"RuAhuamOsG9S"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write code that determines all the letters that two words have in common, whereby each letter should only be reported once, only using sets:"],"metadata":{"id":"h-yKF6IEkC1H"}},{"cell_type":"code","source":["a = set(input(\"Enter a word: \"))\n","b = set(input(\"Enter another word: \"))\n","\n","inter = a.intersection(b)"],"metadata":{"id":"cYElBva5kJg5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["A famous syllogism says: _\"All men are mortal. Socrates is a man. Therefore\n","Socrates is mortal.\"_. In the code block below you see some sets. The first is the set of all things, the second is the set of all men. The third set contains everything that is mortal. Using set operators and methods, show that indeed all men are mortal, Socrates is a man, and Socrates is mortal. Also shows that there are mortal things that are not men, and there are things that are not mortal.\n","```\n","allthings = {\"Socrates\", \"Plato\", \"Eratosthenes\", \"Zeus\", \"Hera\", \"Athens\", \"Acropolis\", \"Cat\", \"Dog\"}\n","men = {\"Socrates\", \"Plato\", \"Eratosthenes\"}\n","mortalthings = {\"Socrates\",\"Plato\",\"Eratosthenes\",\"Cat\",\"Dog\"}\n","```"],"metadata":{"id":"rjI0qi29mCwH"}},{"cell_type":"code","source":["allthings = {\"Socrates\", \"Plato\", \"Eratosthenes\", \"Zeus\", \"Hera\", \"Athens\", \"Acropolis\", \"Cat\", \"Dog\"}\n","men = {\"Socrates\", \"Plato\", \"Eratosthenes\"}\n","mortalthings = {\"Socrates\", \"Plato\", \"Eratosthenes\", \"Cat\", \"Dog\"}\n","\n","men_mortal = men.issubset(mortalthings)\n","soc_men = \"Socrates\" in men\n","soc_mortal = \"Socrates\" in mortalthings\n","\n","mor_not_men = len(mortalthings.difference(men)) != 0\n","allthings = len(allthings.difference(mortalthings)) != 0\n","\n","men_mortal, soc_men, soc_mortal, mor_not_men, allthings"],"metadata":{"id":"-m93aEComyV6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write a program that first produces three sets of numbers between 1 and\n","1000, the first all those numbers that are divisible by 3, the second all those numbers that are divisible by 7, and the third all those numbers that are divisible by 11. Produce sets of all the numbers between 1 and 1000 that are divisible by 3, 7, and 11, are divisible by 3 and 7, but not by 11, and that are not divisible by 3, 7, or 11:"],"metadata":{"id":"IgDYi1e-migT"}},{"cell_type":"code","source":["div_3 = set([i for i in range(1000) if i % 3 == 0])\n","div_7 = set([i for i in range(1000) if i % 7 == 0])\n","div_11 = set([i for i in range(1000) if i % 11 == 0])\n","\n","all = set([i for i in range(1000)])\n","all_div = div_3.union(div_7).union(div_11)\n","\n","div_3711 = div_3.intersection(div_7).intersection(div_11)\n","div_37_not11 = div_3.intersection(div_7).difference(div_11)\n","not_div_3711 = all.difference(all_div)"],"metadata":{"id":"maJ0H9i2mx6a"},"execution_count":null,"outputs":[]}]}