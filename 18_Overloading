{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNOmqwqu4SALLoFXY3C8kua"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import math\n","import cmath as im\n","import statistics as st\n","import random\n","import copy\n","\n","from datetime import date"],"metadata":{"id":"P-bDsNFtRSFZ","executionInfo":{"status":"ok","timestamp":1709595522000,"user_tz":-60,"elapsed":535,"user":{"displayName":"Naomi CedeÃ±o Manrique","userId":"07623801168020297088"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["Add to the _Rectangle_ class operators to test for equality of rectangles, and\n","greater/smaller operators:"],"metadata":{"id":"_Wj6feFTMaZH"}},{"cell_type":"code","source":["class PositiveValuesException(Exception):\n","    pass\n","\n","class Rectangle:\n","  def __init__(self, width, height):\n","    try:\n","      if height > 0:\n","        self.height = height\n","      else:\n","        raise PositiveValuesException\n","\n","      if width > 0:\n","        self.width = width\n","      else:\n","        raise PositiveValuesException\n","\n","    except PositiveValuesException:\n","      print(\"Exception occurred: Only positive values allowed.\")\n","\n","  def __repr__(self):\n","    return f\"[{self.tl_corner}, {self.lr_corner}]\"\n","\n","  def __eq__(self, rectangle):\n","    if self.width == rectangle.width and self.height == rectangle.height:\n","      True\n","    else:\n","      False\n","\n","  def __lt__(self, rectangle):\n","    if self.width * self.height < rectangle.width * rectangle.height:\n","      return True\n","    else:\n","      return False\n","\n","  def __gt__(self, rectangle):\n","    if self.width * self.height > rectangle.width * rectangle.height:\n","      return True\n","    else:\n","      return False"],"metadata":{"id":"hv9vbNXnMiB_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["A playing card consists of a suit $(\"Hearts\", \"Spades\", \"Clubs\",\n","\"Diamonds\")$ and a value $(2, 3, 4, 5, 6, 7, 8, 9, 10, \"Jack\", \"Queen\", \"King\",\n","\"Ace\")$. Implement a _Card_ class. Implement that cards are equal when they have an equal rank, and that the other comparisons use the ranks:"],"metadata":{"id":"qgNSiab1WPTY"}},{"cell_type":"code","source":["class Card:\n","  def __init__(self, value, suit):\n","\n","    special_cards = [\"Jack\", \"Queen\", \"King\", \"Ace\"]\n","\n","    for i in range(len(special_cards)):\n","      if value == special_cards[i]:\n","        value = 11 + i\n","\n","    self.value = value\n","    self.suit = suit\n","\n","  def __repr__(self):\n","    return f\"{self.value} of {self.suit}\"\n","\n","  def __eq__(self, card):\n","    if self.value == card.value:\n","      return True\n","    else:\n","      return False\n","\n","  def __gt__(self, card):\n","    if self.value > card.value:\n","      return True\n","    else:\n","      return False\n","\n","  def __lt__(self, card):\n","    if self.value < card.value:\n","      return True\n","    else:\n","      return False"],"metadata":{"id":"lyxG7qKcWeS8"},"execution_count":null,"outputs":[]}]}