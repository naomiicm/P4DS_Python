{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPNdvWfkifrTm0xV/3HBDXp"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import math\n","import cmath as im\n","import statistics as st\n","import random\n","import copy\n","\n","from datetime import date"],"metadata":{"id":"P-bDsNFtRSFZ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Create a list of all the points with integer coordinates, with both their $x$ and $y$ coordinates ranging from $0$ to $3$:"],"metadata":{"id":"T333nRvrJC3C"}},{"cell_type":"code","source":["class Point:\n","  def __init__(self, x, y):\n","    self.x = x\n","    self.y = y\n","\n","  def __repr__(self):\n","    return f\"({self.x}, {self.y})\"\n","\n","lp = []\n","c = 0\n","\n","for i in range(4):\n","  for j in range(4):\n","    p = Point(i, j)\n","    lp.append(p)\n","\n","    c += 1\n","\n","    print(f'Point {c}: {p}')"],"metadata":{"id":"EY_g66u9JDZ4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Expand the _Point_ class with a color attribute. A color is represented by a\n","number between $0$ and $2^{24}- 1$. Make sure the color is used both in the \\__init_()\\_ method and in the \\__repr_()\\_ method:"],"metadata":{"id":"tK5AJozhNNj3"}},{"cell_type":"code","source":["class Point:\n","  def __init__(self, x, y, color):\n","    self.x = x\n","    self.y = y\n","    self.color = color\n","\n","  def __repr__(self):\n","    return f\"({self.x}, {self.y}) of color code {self.color}\""],"metadata":{"id":"8_u_3vInN6GM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Enhance the _Point_ class with a method that turns a point into its polar opposite:"],"metadata":{"id":"6oyP7E9MQH54"}},{"cell_type":"code","source":["class Point:\n","  def __init__(self, x, y, color):\n","    self.x = x\n","    self.y = y\n","    self.color = color\n","\n","  def __repr__(self):\n","    return f\"({self.x}, {self.y}) of color code {self.color}\"\n","\n","  def get_opposite(self):\n","    self.x = -self.x\n","    self.y = -self.y"],"metadata":{"id":"cLkabGaCOoqp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Create a version of the _Rectangle_ class, that instead of the top-left corner point, width, and height, gets the top-left corner point and the lower-right corner point:"],"metadata":{"id":"yvcE2eqrRJXU"}},{"cell_type":"code","source":["class Rectangle:\n","  def __init__(self, tl_corner, lr_corner):\n","    self.tl_corner = tl_corner\n","    self.lr_corner = lr_corner\n","\n","  def __repr__(self):\n","    return f\"[{self.tl_corner}, {self.lr_corner}]\""],"metadata":{"id":"SimEq0NsRPzl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Create a version of the _Rectangle_ class that is safe by assuring that both\n","width and height are positive values. Expand it with methods that calculate its surface area and its circumference. Also provide a method that returns the bottom-right corner of the rectangle as a Point. Finally, create a method that gets a second Rectangle object as parameter, and returns the overlapping area of the two rectangles as a new Rectangle object."],"metadata":{"id":"LJPLjs-pVry7"}},{"cell_type":"code","source":["class PositiveValuesException(Exception):\n","    pass\n","\n","class Rectangle:\n","  def __init__(self, tl_corner, width, height):\n","    self.tl_corner = tl_corner\n","\n","    try:\n","      if height > 0:\n","        self.height = height\n","      else:\n","        raise PositiveValuesException\n","\n","      if width > 0:\n","        self.width = width\n","      else:\n","        raise PositiveValuesException\n","\n","    except PositiveValuesException:\n","      print(\"Exception occurred: Only positive values allowed.\")\n","\n","  def __repr__(self):\n","    return f\"[{self.tl_corner}, {self.lr_corner}]\"\n","\n","  def bottom_right(self):\n","    return Point(self.tl_corner.x + self.width, self.tl_corner.y - self.height)\n","\n","  def x_limits(self):\n","    return Point(self.tl_corner.x, self.bottom_right().x)\n","\n","  def y_limits(self):\n","    return Point(self.tl_corner.y, self.bottom_right().y)\n","\n","  def overlapping_area(self, rectangle):\n","    dif_x = 0\n","    dif_y = 0\n","\n","    tlc = Point(max(self.x_limits().x, rectangle.x_limits().x), min(self.y_limits().x, rectangle.y_limits().x))\n","    trc = Point(min(self.x_limits().y, rectangle.x_limits().y), min(self.y_limits().x, rectangle.y_limits().x))\n","    blc = Point(max(self.x_limits().x, rectangle.x_limits().x), max(self.y_limits().y, rectangle.y_limits().y))\n","    brc = Point(min(self.x_limits().y, rectangle.x_limits().y), max(self.y_limits().y, rectangle.y_limits().y))\n","\n","    dif_x = math.sqrt(((tlc.x - trc.x) ** 2) + ((tlc.y - trc.y) ** 2))\n","    dif_y = math.sqrt(((tlc.x - blc.x) ** 2) + ((tlc.y - blc.y) ** 2))\n","\n","    return dif_x * dif_y"],"metadata":{"id":"shBp34lLV_nK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["A student has a last name, a first name, a date of birth, and an administration number. A course has a name and a number. Students can enroll in courses. Create a class Student and a class Course. Create several students and several courses. Enroll each student in some of the courses. Display a list of students, showing their number, first name, last name, and age, and per student which courses he or she is enrolled in:"],"metadata":{"id":"QFKvYyRpWABH"}},{"cell_type":"code","source":["class Course:\n","  def __init__(self, name, number):\n","    self.name = name\n","    self.number = number\n","\n","class Student:\n","  def __init__(self, id, first, last, date_birth):\n","    self.id = id\n","    self.first = first\n","    self.last =last\n","    self.date_birth = date_birth\n","    self.courses = {}\n","\n","  def age(self):\n","    return math.floor((date.today() - self.date_birth).days / 365.25)\n","\n","  def enroll(self, course):\n","    if course.name not in self.courses.keys():\n","      self.courses[course.name] = course.values()\n","\n","  def n_enrolled(self):\n","    print(\"Current courses:\")\n","\n","    for i in self.courses:\n","      print(f\"{i.keys()}: Code {i.values()}\")"],"metadata":{"id":"1_bO-_SGWOVs"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Modify the constructor of last class _Vehicle_:, given below, so that it initialises the number of wheels, seating capacity, and max speed attributes when some of them are not passed as argument when the object is created:\n","```\n","class Engine:\n","  def __init__(self, type):\n","    self.type = type\n","\n","class Vehicle:\n","  def __init__(self, number_of_wheels, type_of_tank, seating_capacity, maximum_velocity):\n","    self.number_of_wheels = number_of_wheels\n","    self.type_of_tank = copy(type_of_tank)\n","    self.seating_capacity = seating_capacity\n","    self.maximum_velocity = maximum_velocity\n","```"],"metadata":{"id":"29tFcLSoxHlW"}},{"cell_type":"code","source":["class Engine:\n","  def __init__(self, type):\n","    self.type = type\n","\n","class Vehicle:\n","  def __init__(self, seating_capacity, number_of_wheels = 4, type_of_tank = 'gas', maximum_velocity = 300):\n","    self.number_of_wheels = number_of_wheels\n","    self.type_of_tank = copy.copy(type_of_tank)\n","    self.seating_capacity = seating_capacity\n","    self.maximum_velocity = maximum_velocity"],"metadata":{"id":"btNHlX_qxHRh"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Implement a class _Point_ that represents a coordinate on a 2D plane. Over this:\n","\n","1. Implement the method _translate()_ that translates it by dx and dy.\n","2. Implement the methods _distance_from_origin()_.\n","3. Implement the method _distance()_ which takes another point as\n","parameter and computes the distance between the two points.\n"],"metadata":{"id":"3jFwLogG1Qph"}},{"cell_type":"code","source":["class Point:\n","  def __init__(self, x, y):\n","    self.x = x\n","    self.y = y\n","\n","  def __repr__(self):\n","    return f''\n","\n","  def translate(self, point):\n","    self.x += point.x\n","    self.y += point.y\n","\n","  def distance_from_origin(self):\n","    return math.sqrt(self.x ** 2 + (self.y ** 2))\n","\n","  def distance(self, point):\n","    return math.sqrt((self.x - point.x) ** 2 + ((self.y - point.y) ** 2))"],"metadata":{"id":"PBzsffld1dX3"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Implement a class Circle constructed by a radius and two methods which will compute the area and the perimeter of a circle:"],"metadata":{"id":"4Dj_9UgT2sN1"}},{"cell_type":"code","source":["class Circle:\n","  def __init__(self, radius):\n","    self.radius = radius\n","\n","  def perimeter(self):\n","    return 2 * math.pi * self.radius\n","\n","  def area(self):\n","    return (math.pi ** 2) * self.radius"],"metadata":{"id":"R9MaEfC-2uS9"},"execution_count":null,"outputs":[]}]}