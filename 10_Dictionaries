{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOvVnoTJ0nBbKy+wbUWdRCl"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import math\n","import cmath as im\n","import statistics as st\n","import random\n","import copy\n","\n","from datetime import date"],"metadata":{"id":"P-bDsNFtRSFZ","executionInfo":{"status":"ok","timestamp":1709594675142,"user_tz":-60,"elapsed":5,"user":{"displayName":"Naomi Cedeño Manrique","userId":"07623801168020297088"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["The code below contains a list of words. Build a dictionary that contains all these words as keys, and their quantities as values. Print the words with their quantities:\n","\n","```\n","wordlist = [\"apple\", \"durian\", \"banana\", \"durian\", \"apple\", \"cherry\", \"cherry\",\"mango\", \"apple\", \"apple\", \"cherry\", \"durian\", \"banana\", \"apple\", \"apple\", \"apple\", \"apple\", \"banana\", \"apple\"]\n","```"],"metadata":{"id":"S1Z97UvEBrSp"}},{"cell_type":"code","source":["wordlist = [\"apple\", \"durian\", \"banana\", \"durian\", \"apple\", \"cherry\", \"cherry\",\"mango\", \"apple\", \"apple\", \"cherry\", \"durian\", \"banana\", \"apple\", \"apple\", \"apple\", \"apple\", \"banana\", \"apple\"]\n","\n","fruits = {}\n","\n","for i in range(len(wordlist)):\n","  fruits[wordlist[i]] = wordlist.count(wordlist[i])\n","\n","print(fruits)"],"metadata":{"id":"5vQpybRwB6wQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["The code block below contains a string that is a list of words, separated by\n","commas. Build a dictionary that contains all these words as keys, and how often they occur as values. Then print the words with their quantities:\n","\n","```\n","text = \"apple, durian, banana, durian, apple, cherry, cherry, mango, apple, apple, cherry, durian, banana, apple, apple, apple, apple, banana, apple\"\n","```"],"metadata":{"id":"1aKCe-l6CA2L"}},{"cell_type":"code","source":["text = \"apple, durian, banana, durian, apple, cherry, mango, apple, apple, cherry, durian, banana, banana, apple, apple, apple, apple, banana, apple\"\n","text = text.split(\", \")\n","text.sort()\n","\n","fruits_t = {}\n","\n","for i in range(len(text)):\n","  fruits_t[text[i]] = text.count(text[i])\n","\n","for i in fruits_t.keys():\n","  print(f'{i}: {fruits_t[i]}')"],"metadata":{"id":"aIEvkYbuCcFR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["The code block below contains a very small dictionary that contains\n","the translations of English words to Italian. Write and test program\n","that uses this dictionary to create a word-for-word translation of the\n","given sentence:\n","\n","```\n","en_it= { \"last\":\"ultimo\", \"week\":\"settimana\", \"the\":\"il\", \"royal\":\"reale\",\n","\"festival\":\"festa\", \"hall\":\"sala\", \"saw\": \"sega\", \"first\":\"primo\",\n","\"performance\":\"esibizione\", “of\":\"di\", \"a\":\"un\", \"new\":\"nuovo\",\n","\"symphony\":\"sinfonia\", \"by\":\"da\", \"one\":\"uno\", \"world\":\"mondo\", “leading”:”alla\n","guida di”, \"modern\": \"moderno\", \"composer\":\"compositore\",\n","\"composers\":\"compositori\", “two\":\"due\" }\n","```"],"metadata":{"id":"DudqYY4yriJ9"}},{"cell_type":"code","source":["en_it= {\"last\":\"ultimo\", \"week\":\"settimana\", \"the\":\"il\", \"royal\":\"reale\",\n","        \"festival\":\"festa\", \"hall\":\"sala\", \"saw\": \"sega\", \"first\":\"primo\",\n","         \"performance\":\"esibizione\", \"of\":\"di\", \"a\":\"un\", \"new\":\"nuovo\",\n","         \"symphony\":\"sinfonia\", \"by\":\"da\", \"one\":\"uno\", \"world\":\"mondo\",\n","         \"leading\":\"alla guida di\", \"modern\": \"moderno\", \"composer\":\"compositore\",\n","         \"composers\":\"compositori\", \"two\":\"due\"}\n","\n","x = \"last week the royal festival hall saw the first performance of a new symphony\"\n","x = x.split()\n","it_x = \"\"\n","\n","for i in x:\n","  it_x += en_it[i] + \" \"\n","\n","print(it_x)"],"metadata":{"id":"P50_8FVHrh14"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write a program that reads from input $n$ pairs name, telephone number, and inserts them, in a dictionary. Then, read a name and display its telephone number, or “not present” if the name is not in the dictionary:"],"metadata":{"id":"KpoEvccJr1C2"}},{"cell_type":"code","source":["dir = []\n","name = \" \"\n","tlf = \" \"\n","c = 0\n","\n","while name != \"\" and tlf != \"\":\n","  name = input(\"Name: \")\n","  tlf = input(\"Phone: \")\n","\n","  pair = {\"name\": name, \"tlf\": tlf}\n","  dir.append(pair)\n","\n","s_name = input(\"Enter a name: \")\n","\n","for i in dir:\n","  if s_name == i[\"name\"]:\n","    print(f\"Phone number of {i['name']} is {i['tlf']}.\")\n","    c +=1\n","\n","if c == 0:\n","  print(f\"The phone number of {s_name} cannot be found.\")"],"metadata":{"id":"e5Tp5e9Ur4sS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write a program that takes a dictionary $d$ and provides a new one $d2$ that is the reversed version of d, i.e., keys of $d$ are values of $d2$ and values of d are keys of $d2$:"],"metadata":{"id":"Jj8o1u58r8f1"}},{"cell_type":"code","source":["d = {\"a\": \"alpha\", \"b\": \"beta\", \"c\": \"charlie\", \"d\": \"delta\"}\n","d2 = {}\n","\n","for i in range(len(d)):\n","  d2[str(list(d.values())[i])] = str(list(d.keys())[i])"],"metadata":{"id":"j8vB6_eSsFC2"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["The code block below shows a list of movies. For each movie it also shows\n","a list of ratings. Convert this code in such a way that it stores all this data in one dictionary, then use the dictionary to print the average rating for each movie, rounded to one decimal:\n","```\n","movies = [\"Monty Python and the Holy Grail\",\n","          \"Monty Python ' s Life of Brian\",\n","          \"Monty Python ' s Meaning of Life\",\n","          \"And Now For Something Completely Different\"]\n","\n","grail_ratings = [ 9, 10, 9.5, 8.5, 3, 7.5,8 ]\n","brian_ratings = [ 10, 10, 0, 9, 1, 8, 7.5, 8, 6, 9 ]\n","life_ratings = [ 7, 6, 5 ]\n","different_ratings = [ 6, 5, 6, 6 ]\n","```"],"metadata":{"id":"tJnHP3j6QI4_"}},{"cell_type":"code","source":["movies = [\"Monty Python and the Holy Grail\", \"Monty Python's Life of Brian\", \"Monty Python's Meaning of Life\", \"And Now For Something Completely Different\"]\n","grail_ratings = [ 9, 10, 9.5, 8.5, 3, 7.5,8 ]\n","brian_ratings = [ 10, 10, 0, 9, 1, 8, 7.5, 8, 6, 9 ]\n","life_ratings = [ 7, 6, 5]\n","different_ratings = [ 6, 5, 6, 6 ]\n","\n","ratings = [grail_ratings, brian_ratings, life_ratings, different_ratings]\n","\n","dict_movies = {}\n","\n","for i in range(len(movies)):\n","  dict_movies[movies[i]] = ratings[i]\n","  print(f\"{sum(dict_movies[movies[i]])/len(dict_movies[movies[i]])}\")"],"metadata":{"id":"48N-cc-1X40F"},"execution_count":null,"outputs":[]}]}