{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM+mmtRGBKvGNjp8M1aKC6G"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import math\n","import cmath as im\n","import statistics as st\n","import random\n","import copy\n","\n","from datetime import date"],"metadata":{"id":"P-bDsNFtRSFZ","executionInfo":{"status":"ok","timestamp":1709595296060,"user_tz":-60,"elapsed":632,"user":{"displayName":"Naomi CedeÃ±o Manrique","userId":"07623801168020297088"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["# Bitwise Operations"],"metadata":{"id":"THiowPIqw0oL"}},{"cell_type":"markdown","source":["Write some code that calculates the decimal number represented by a binary\n","string of 8 ones and zeroes. The nicest solution uses a loop, a multiplier, and a total. The total starts at 0. The multiplier starts at 1, and every time the loop is traversed it is multiplied by 2. The loop processes the string\n","from right to left, and if the character encountered is a 1, it adds the multiplier to a total. This will end up with the number represented by\n","the string as the total:"],"metadata":{"id":"mX7-3LyIxksu"}},{"cell_type":"code","source":["x = input(\"Enter a binary string of up to eight characters: \")\n","c = 0\n","\n","if len(x) > 8:\n","  print(\"Enter a valid string.\")\n","  exit()\n","else:\n","  l_x = list(x)\n","\n","  for i in range(-len(l_x), 0):\n","    l_x[i] = int(x[i])\n","\n","    if l_x[i] != 0 and l_x[i] != 1:\n","      i = 1\n","      print(\"Binary strings contain only ones and zeros. Try again.\")\n","      exit()\n","    if l_x[i] == 1:\n","      l_x[i] = 2 ** (-i-1)\n","    else:\n","      l_x[i] = 0\n","\n","if i == 1:\n","  print(f\"The decimal equivalent of {x} is {sum(l_x)}\")"],"metadata":{"id":"fTMq5FVhxwGQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["The bitwise and is an easy way to take positive numbers modulo a power of\n","$2$. Check that the value of $345$ modulo $32$ is the same as taking $345$ and $31$:"],"metadata":{"id":"sf6d98Oex1ZQ"}},{"cell_type":"code","source":["345 % 32 == 345 & 31"],"metadata":{"id":"bjhpN1GPyIkB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["To set a single bit in a pattern to the value $1$, you can use the bitwise or and a pattern that consists of only zeroes, except for a $1$ in the spot where you want to set the bit. An easy way to create a bit pattern with only one bit set, is to start with the number $1$, and use the shift-left operator to shift that bit to the left as far as you need. Now take a number and set the bit with index $7$, the eight bit from the right, to $1$:"],"metadata":{"id":"-Ck7zQWAyL2W"}},{"cell_type":"code","source":["bin = int(input(\"Insert a number: \"))\n","n = int(input(\"Insert the bit you want to set: \"))\n","\n","bin | (1 << n)"],"metadata":{"id":"mlZYuA9yyXnI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["To set a single bit to the value zero, you can use the bitwise _and_ and a pattern that consists of only ones, except for a zero in the spot where you\n","want to clear the bit. An easy way to create a bit pattern consisting on only ones, except for a zero in the intended spot, is to start with the number $1$, and use the shift-left operator to shift that bit to the left as far as you need. Then invert the pattern with the bitwise _not_ operator. Now take a number and clear the bit with index $3$, the fourth bit from the right:"],"metadata":{"id":"Xf7BudYsybiI"}},{"cell_type":"code","source":["bin = int(input(\"Insert a number: \"))\n","n = int(input(\"Insert the bit you want to set: \"))\n","\n","bin & ~(1 << n)"],"metadata":{"id":"FvM0l-Mlyqs2"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write a function that gets an integer, a boolean, and a number. The integer is used to store booleans. Each bit in the integer represents $True$ or $False$. The bits of the integer are numbered as the convention indicates, with the rightmost bit having number zero, the bit next to that number 1, etcetera. If the boolean parameter is $True$, the function sets the bit corresponding to the number parameter in the integer to 1. If the boolean parameter is $False$, the function sets to 0 the bit corresponding to the number parameter in the integer. The function then returns the integer.\n","\n","Also write a function that gets an integer and a number as parameters, and returns $True$ if the bit corresponding to the number is set to 1, and $False$ otherwise:\n","\n","_Hint: To test the functions, it helps to create an extra function that displays the bits in the number. The display function can make use of the function that gets the bit values._"],"metadata":{"id":"X2wPMsOQxEk9"}},{"cell_type":"code","source":["x = int(input(\"Enter an integer number \"))\n","y = bool(input(\"Enter a boolean value: \"))\n","z = int(input(\"Enter the bit number within the byte: \")) - 1\n","\n","if y == True:\n","  print(x | (1 << z))\n","else:\n","  print(x & ~(1 << z))\n","\n","if (x >> z) % 2 != 0:\n","  print(True)\n","else:\n","  print(False)"],"metadata":{"id":"lm96syLyxdjX"},"execution_count":null,"outputs":[]}]}