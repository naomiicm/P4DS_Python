{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNlzBhimH+d8xC/oCWt9YUU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import math\n","import cmath as im\n","import statistics as st\n","import random\n","import copy\n","\n","from datetime import date"],"metadata":{"id":"P-bDsNFtRSFZ","executionInfo":{"status":"ok","timestamp":1709593941275,"user_tz":-60,"elapsed":365,"user":{"displayName":"Naomi Cedeño Manrique","userId":"07623801168020297088"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["Change a list that contains only words by turning every word in the list into a word consisting of only capitals:"],"metadata":{"id":"nEoqFNr0NAKQ"}},{"cell_type":"code","source":["l = [\"apple\", \"banana\", \"cherry\", \"durian\", \"orange\"]\n","\n","for i in range(len(l)):\n","  l[i] = l[i].upper()"],"metadata":{"id":"w0IJXRckJ5sg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write a program that asks the user to enter some data, for instance the names\n","of their friends. When the user wants to stop providing inputs, he just presses Enter. The program then displays an alphabetically sorted list of the data items entered. Do not just print the list, but print each item separately, on a different line:"],"metadata":{"id":"V2L-PVxfTTsA"}},{"cell_type":"code","source":["name = \" \"\n","names = []\n","\n","while name != \"\":\n","  name = input(\"Enter a word: \")\n","  names.append(name)\n","else:\n","  names.pop()\n","  names.sort()\n","  print(names)\n","\n","  for i in range(len(names)):\n","    print(names[i])"],"metadata":{"id":"PYuvtNd8TWKq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Sort a list of numbers using their absolute values; use the $abs()$ function as key:"],"metadata":{"id":"g_dSHLDDSnG9"}},{"cell_type":"code","source":["l = [1, -3, 4, 5, -2, 0.5, -1]\n","\n","l.sort(key = abs)\n","\n","print(l)"],"metadata":{"id":"opWc2T4DTa4U"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Count how often each letter occurs in a string, ignoring every character that is not a letter:"],"metadata":{"id":"V2iBbXaiTbVR"}},{"cell_type":"code","source":["s = \"naomii.cm23@gmail.com\"\n","\n","abc = [chr(i).lower() for i in range(ord(\"A\"), ord(\"Z\") + 1)]\n","\n","for j in abc:\n","   print(f\"count {j.upper()} : {s.count(j)}\")"],"metadata":{"id":"WmpuaA29Tq3-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write a program that reads an integer number n, creates\n","a list that contains the first n positive integers, and prints\n","it:"],"metadata":{"id":"66j3tlNq5pCm"}},{"cell_type":"code","source":["def n_int():\n","  n = int(input(\"Enter a positive integer number: \"))\n","  n_list = []\n","\n","  for i in range(n):\n","    n_list.append(i + 1)\n","\n","  print(n_list)"],"metadata":{"id":"5SLWhINq5rwj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write and test a function that, given an integer x and a\n","list, returns the position of x in the list, or -1 if x is not in\n","the list:"],"metadata":{"id":"EGUYkJac5sSF"}},{"cell_type":"code","source":["def n_in_list(n, l):\n","  if n in l:\n","    return l.index(n)\n","  else:\n","    return -1"],"metadata":{"id":"qSNIGmIv5vZQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write a program that reads from input a list of n integers\n","and displays the sum, the mean, the max and the min\n","only of the even numbers in the list:"],"metadata":{"id":"4J0Yzl_45wLe"}},{"cell_type":"code","source":["def op_only_even(n):\n","  l = []\n","\n","  for i in range(n):\n","    n_input = int(input(\"Enter an integer number: \"))\n","\n","    if n_input % 2 == 0:\n","      l.append(n_input)\n","\n","  print(f\"Sum: {sum(l)}\\nMean: {st.mean(l)}\\nMin: {min(l)}\\nMax: {max(l)}\")"],"metadata":{"id":"DJtZ2NnS5znz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["A magic 8-ball, when asked a question, provides a random answer from a\n","list. The code below contains a list of possible answers. Create a magic 8-ball program that asks a question, then gives a random answer:\n","\n","```\n","answers = [ \"It is certain\", \"It is decidedly so\", \"Without a \\\n","doubt\", \"Yes, definitely\", \"You may rely on it\", \"As I see it, \\\n","yes\", \"Most likely\", \"Outlook good\", \"Yes\", \"Signs point to yes\",\n","\"Reply hazy try again\", \"Ask again later\", \"Better not tell you \\\n","now\", \"Cannot predict now\", \"Concentrate and ask again\", \"Don ' t \\\n","count on it\", \"My reply is no\", \"My sources say no\", \"Outlook \\\n","not so good\", \"Very doubtful\" ]\n","```"],"metadata":{"id":"J8S7wlio6DcF"}},{"cell_type":"code","source":["def magic8_ball():\n","  answers = [ \"It is certain\", \"It is decidedly so\", \"Without a doubt\", \"Yes, definitely\", \"You may rely on it\", \"As I see it, yes\", \"Most likely\", \"Outlook good\", \"Yes\",\n","           \"Signs point to yes\", \"Reply hazy try again\", \"Ask again later\", \"Better not tell you now\", \"Cannot predict now\", \"Concentrate and ask again\", \"Don\\'t count on it\",\n","            \"My reply is no\", \"My sources say no\", \"Outlook not so good\", \"Very doubtful\" ]\n","\n","  question = input(\"Enter a question: \")\n","  rdm_index = random.randint(0, len(answers) - 1)\n","\n","  print(answers[rdm_index])"],"metadata":{"id":"0_1WZX2VGFkg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["A playing card consists of a suit $(\"Hearts\", \"Spades\", \"Clubs\",\n","\"Diamonds\")$ and a value $(2, 3, 4, 5, 6, 7, 8, 9, 10, \"Jack\", \"Queen\", \"King\",\n","\"Ace\")$. Create a list of all possible playing cards, which is a deck. Then create a function that shuffles the deck, producing a random order:"],"metadata":{"id":"g9SoSJiD6DPF"}},{"cell_type":"code","source":["def build_deck():\n","  suit = [\"Hearts\", \"Spades\", \"Clubs\", \"Diamonds\"]\n","  values = [2, 3, 4, 5, 6, 7, 8, 9, 10, \"Jack\", \"Queen\", \"King\", \"Ace\"]\n","  deck = []\n","\n","  for i in suit:\n","    for j in values:\n","      comb = str(j) + \" of \" + i\n","      deck.append(comb)\n","\n","def shuffle_deck(deck):\n","  n_deck = []\n","\n","  rdm_idxs = random.sample(range(len(deck)), len(deck))\n","\n","  for i in rdm_idxs:\n","    n_deck.append(deck[i])\n","\n","  print(n_deck)"],"metadata":{"id":"ee6plxIc6Ftl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["first-in-first-out (FIFO) structure, also called a “queue,” is a list that gets\n","new elements added at the end, while elements from the front are removed and processed. Write a program that processes a queue. In a loop, ask the user for input. If the user just presses the Enter key, the program ends. If the user enters anything else, except for a single question mark, the program considers what the user entered a new element and appends it to the queue. If the user enters a single question mark, the program pops the first element from the queue and displays it:"],"metadata":{"id":"-_YEf7QI6Zn_"}},{"cell_type":"code","source":["def queue():\n","  inp = \" \"\n","  queue = []\n","\n","  while inp != \"\":\n","    inp = input(\"Enter an element: \")\n","    if inp == \"?\":\n","      if len(queue) > 0:\n","        print(f\"First element ({queue[0]}) removed.\")\n","        queue.pop(0)\n","      else:\n","        print(\"There are not elements left in your collection.\")\n","        break\n","    else:\n","      queue.append(inp)"],"metadata":{"id":"NDZ-jf6p6khw"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Count how often each letter occurs in a string, ignoring every character that is not a letter. Print the letters with their counts, in order from highest count to lowest count:"],"metadata":{"id":"BtajaySM6nus"}},{"cell_type":"code","source":["s = \"naomii.cm23@gmail.com\"\n","\n","abc = [chr(i).lower() for i in range(ord(\"A\"), ord(\"Z\") + 1)]\n","l = []\n","\n","for j in abc:\n","   l.append(str(s.count(j))+j.upper())\n","\n","l.sort(reverse = True)\n","\n","for i in l:\n","  print(f\"{i[-1]}: {i[0:-1]}\")"],"metadata":{"id":"yhsqaCJL6vHb"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["The sieve of Eratosthenes is a method to find all prime numbers between\n","1 and a given number using a list. This works as follows: Fill the list with the sequence of numbers from 1 to the highest number. Set the value of 1 to zero, as 1 is not prime. Now loop over the list. Find the next number on the list that is not zero, which, at the start, is the number 2. Now set all multiples of this number to zero. Then find the next number on the list that is not zero, which is 3. Set all multiples of this number to zero. Then the next number, which is 5 (because 4 has already been set to zero), and do the same thing again. Process all the numbers of the list in this way. When you have finished, the only numbers left on the list are primes. Use this method to determine all the primes between 1 and 100:"],"metadata":{"id":"K3N8XW-a6wCa"}},{"cell_type":"code","source":["n = 10\n","l = [i for i in range(1, n + 1)]\n","\n","l[0] = 0\n","\n","for i in range(len(l)):\n","  if l[i] != 0:\n","    chk = l[i]\n","    for j in range(i, len(l)):\n","      if chk == l[j]:\n","        continue\n","      else:\n","        if l[j] != 0 and l[i] != 0:\n","          if l[j] % l[i] == 0:\n","            l[j] = 0\n","\n","l.sort()\n","l"],"metadata":{"id":"wf_QuGIN64M2"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write a Tic-Tac-Toe program that allows two people to play the game\n","against each other. In turn, ask each player which row and column they want to play. Make sure that the program checks if that row/column combination is empty. When a player has won, end the game. When the whole board is full and there is no winner, announce a draw:"],"metadata":{"id":"ZXxK864A64xc"}},{"cell_type":"code","source":["status = \"\"\n","\n","l = [[\"0\"] * 3 for i in range(0, 3)]\n","empty = 0\n","cont = 0\n","diag = 0\n","diag_x = 0\n","\n","while status != \"End\":\n","  r = int(input(f\"Enter row: \")) - 1\n","  c = int(input(f\"Enter column: \")) - 1\n","\n","  if l[r][c] == \"0\":\n","    if cont % 2 == 0:\n","      l[r][c] = \"X\"\n","    else:\n","      l[r][c] = \"O\"\n","\n","    cont += 1\n","  else:\n","    print(\"Box occupied, enter another box.\")\n","    continue\n","\n","  print(f\"Game status: {l}\")\n","\n","  for i in range(len(l)):\n","    for j in range(len(l)):\n","      if l[i][j] == \"0\":\n","        empty += 1\n","\n","  diag = 0\n","  diag_x = 0\n","\n","  for i in range(len(l)):\n","    if l[i][i] == \"X\":\n","      if diag_x == 3:\n","        status = \"End\"\n","        print(\"Win for X\")\n","      else:\n","        diag_x +=1\n","    elif l[i].count(\"X\") == 3:\n","      status = \"End\"\n","      print(\"Win for X\")\n","    elif l[:][i].count(\"X\") == 3:\n","      status = \"End\"\n","      print(\"Win for X\")\n","    elif l[i][i] == \"O\":\n","      if diag == 3:\n","        status = \"End\"\n","        print(\"Win for O\")\n","      else:\n","        diag +=1\n","    elif l[i].count(\"O\") == 3:\n","      status = \"End\"\n","      print(\"Win for O\")\n","    elif l[:][i].count(\"O\") == 3:\n","      status = \"End\"\n","      print(\"Win for O\")\n","    else:\n","      continue"],"metadata":{"id":"fI_3BDCQ7I7x"},"execution_count":null,"outputs":[]}]}