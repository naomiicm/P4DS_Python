{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMnEQNsFgNUU6f45MFP4cLO"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import math\n","import cmath as im\n","import statistics as st\n","import random\n","import copy\n","\n","from datetime import date"],"metadata":{"id":"P-bDsNFtRSFZ","executionInfo":{"status":"ok","timestamp":1709595851296,"user_tz":-60,"elapsed":455,"user":{"displayName":"Naomi Cedeño Manrique","userId":"07623801168020297088"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["A recursive definition of the nth number of the Fibonacci sequence $fib(n)$\n","states that $fib(n) = fib(n-1) + fib(n-2)$. Moreover, $fib(1)$ and $fib(2)$ are both $1$. Write a recursive function that you can call with an integer argument n that returns the nth number of the Fibonacci sequence:"],"metadata":{"id":"_ixKjYvNs685"}},{"cell_type":"code","source":["n = int(input(\"Ingrese el número de términos: \"))\n","\n","def fibo(n):\n","\n","  fib_1 = 1\n","  fib_2 = 1\n","\n","  if n == 1:\n","    return fib_1\n","  elif n == 2:\n","    return fib_1 + fib_2\n","  else:\n","    return fibo(n-1) + fibo(n-2)"],"metadata":{"id":"e05M3hbDtAP6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["The greatest common divider is the greatest integer that divides two other integers without remainder. Euclides algorithm that calculates the greatest common divider of two numbers says that if the largest divided by the smallest is an integer, it is the smallest. Otherwise, it is the result of calculating the greatest common divider of the smallest and the remainder of the largest divided by the smallest. This is a recursive defintion. Implement Euclides algorithm in a recursive function:\n","\n","_Hint: testing whether two numbers divide each other, and calculating the remainder, can both be done with the modulo operator._"],"metadata":{"id":"yrmIdi3r5lqc"}},{"cell_type":"code","source":["x = int(input(\"Enter a number: \"))\n","y = int(input(\"Enter another number: \"))\n","\n","def gcd(x, y):\n","  a = max(x, y)\n","  b = min(x, y)\n","\n","  if a % b == 0:\n","    return b\n","  else:\n","    return gcd(b, a % b)\n","\n","gcd(x, y)"],"metadata":{"id":"6C1F9GBN5z0p"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Solve Hanoi's Tower problem for size $N$ where you move from pole $X$ to pole $Y$ with $Z$ as temporary pole, you first solve it for size $N - 1$ where you move from pole $X$ to pole $Z$ with pole $Y$ as temporary pole, then move the disc of size $N$ from pole $X$ to pole $Y$, and finally solve the problem for\n","size $N - 1$ where you move from pole $Z$ to pole $Y$ with pole $X$ as temporary pole:"],"metadata":{"id":"n-zoIDVA6U0d"}},{"cell_type":"code","source":["n = int(input(\"Enter the number of discs: \"))\n","ini = input(\"Define the initial disc: \")\n","end = input(\"Define the final disc: \")\n","aux = input(\"Define the auxiliary disc: \")\n","\n","def hanoi_tower(n, ini, end, aux):\n","  if n == 1:\n","    print(f\"Move the disc {n} from disc {ini} to disc {end}.\")\n","    return\n","\n","  hanoi_tower(n-1, ini, aux, end)\n","  print(f\"Move the disc {n} from disc {ini} to disc {end}.\")\n","  hanoi_tower(n-1, aux, end, ini)\n","\n","hanoi_tower(n, ini, end, aux)"],"metadata":{"id":"fHg12A3N6rEa"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write and test a function that, given an integer n, calculates the sum of numbers from $1$ to $n$ using recursion:\n"],"metadata":{"id":"bYXaZL_eIZiQ"}},{"cell_type":"code","source":["n = int(input(\"Enter a number: \"))\n","\n","def sum_count_r(n):\n","  if n == 1:\n","    return 1\n","  else:\n","    return n + sum_count_r(n-1)\n","\n","sum_count_r(n)"],"metadata":{"id":"ChfME173IwAE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write and test a recursive function that, given integers $x$ and $y$, computes $x*y$:"],"metadata":{"id":"5qz5UoIfIwXD"}},{"cell_type":"code","source":["x = int(input(\"Enter a number: \"))\n","y = int(input(\"Enter another number: \"))\n","\n","def mult_r(x, y):\n","  if y == 1:\n","    return x\n","  elif y == 0 or x == 0:\n","    return 0\n","  else:\n","    return x + mult_r(x, y-1)\n","\n","mult_r(x, y)"],"metadata":{"id":"HE8Sl90qJPdK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write and test a recursive function to count the number of digits of a given positive number:"],"metadata":{"id":"rbvWusAYJP2d"}},{"cell_type":"code","source":["n = int(input(\"Enter a number: \"))\n","\n","def count_digits_r(n):\n","  if 0 <= n <= 9 or -9 <= n <= -1:\n","    return 1\n","  else:\n","    return 1 + count_digits_r(n // 10)\n","\n","count_digits_r(n)"],"metadata":{"id":"9PZcsksTJVMo"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write and test a recursive function to find the sum of digits of a given positive number:\n","\n","_Hint: divide by 10 and use modulo operator._"],"metadata":{"id":"MG5O1evcJVpC"}},{"cell_type":"code","source":["n = int(input(\"Enter a number: \"))\n","\n","def sum_digits_r(n):\n","  n = abs(n)\n","\n","  if n == 0:\n","    return 0\n","  else:\n","    return n % 10 + sum_digits_r(n // 10)\n","\n","sum_digits_r(n)"],"metadata":{"id":"X4uCFAzbKb0k"},"execution_count":null,"outputs":[]}]}